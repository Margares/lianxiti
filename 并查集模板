#include<iostream>
#include<stdio.h>
#include<string.h>

using namespace std;
int pre[1000];
int find(int x){
	int r=x;
	while(pre[r]!=r)//查找根节点，
		r=pre[r];//如果根节点不是本身，继续寻找上一级节点 		
	int i=x,j;
	while(i!=r){//路径压缩 
		j=pre[i];//如果x根节点不为本身，用j存放上一级节点 
		pre[i]=r;//将i上一级节点替换为根节点 
		i=j;//用i的上一级节点重复此过程 
	}
	return r;//返回x的根节点		
}
int join(int x,int y){//合并两个节点 
	int a=find(x);//如果x，y根节点不相同，则将a的根节点设为b 
	int b=find(y);
	if(a!=b);
	pre[a]=b;
	return 0; 
} 
int main(){
	int pre[1000];
	int m,n,i,a,b,num=0;
	bool flag[1000];
	while(scanf("%d %d",&n,&m)!=EOF){
		for (i=0;i<n;i++)//将每一个元素根节点设为本身 
			pre[i]=i;
		for(i=0;i<m;i++){
			cin>>a>>b;
			join(a,b);
		}	
		memset(flag,0,sizeof(flag));
		for (i=0;i<n;i++)
			if(find(i))
			flag[i]=1; 	
		for (i=0;i<n;i++)
		if(flag[i]) num++;//记录所有根节点数目
		cout<<num-1;
	}
	return 0;
} #include<iostream>
#include<stdio.h>
#include<string.h>

using namespace std;
int pre[1000];
int find(int x){
	int r=x;
	while(r!=pre[r])//查找根节点，
		r=pre[r];//如果根节点不是本身，继续寻找上一级节点 		
	int i=x,j;
	while(pre[i]!=r){//路径压缩 
		j=pre[i];//如果x根节点不为本身，用j存放上一级节点 
		pre[i]=r;//将i上一级节点替换为根节点 
		i=j;//用i的上一级节点重复此过程 
	}
	return r;//返回x的根节点		
}
int join(int x,int y){//合并两个节点 
	int a=find(x);//如果x，y根节点不相同，则将a的根节点设为b 
	int b=find(y);
	if(a!=b);
	pre[a]=b;
	return 0; 
} 
int main(){
	int pre[1000];
	int m,n,i,a,b,num=0;
	bool flag[1000];
	while(scanf("%d %d",&n,&m)!=EOF){
		for (i=1;i<=n;i++)//将每一个元素根节点设为本身 
			pre[i]=i;
		for(i=1;i<=m;i++){
			scanf("%d %d",&a,&b);
			join(a,b);
		}	
		memset(flag,0,sizeof(flag));
		for (i=1;i<=n;i++)
			flag[find(i)]=1; 	
		for (i=1;i<=n;i++)
		if(flag[i]) num++;
		printf("%d",num-1);
	}
	return 0;
} 
